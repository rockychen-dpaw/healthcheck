import threading
import socket
import json
import logging

from .. import settings
from .. import serializers
from .. import exceptions
from .. import shutdown
from ..lists import CycleList

from . import connectiontype

logger = logging.getLogger("healthcheck.socketclient")

socket.setdefaulttimeout(settings.BLOCK_TIMEOUT)

class SocketClient(object):
    count = 0
    conn_type = None
    def __init__(self):
        self.host = "127.0.0.1" if settings.HEALTHCHECKSERVER_LOCAL else "0.0.0.0"
        self.port = settings.HEALTHCHECKSERVER_PORT
        self.__class__.count += 1
        self.name = "{} socketclient({}:{})_{}".format(self.conn_type,self.host,self.port,self.count)
        self._conn = None
        shutdown.register(self)


    def __str__(self):
        return self.name

    def shutdown(self):
        pass

    def post_connected(self):
        """
        Called right after the client is established
        """
        pass

    @property
    def connection(self):
        if not self._conn:
            while not shutdown.shutdowning and not self._conn:
                #connect to socket server
                connected = False
                while not shutdown.shutdowning and not connected:
                    conn = None
                    try:

                        conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
                        conn.settimeout(settings.BLOCK_TIMEOUT)
                        connected = False
                        logger.info("{} : Connecting".format(self))
                        conn.connect((self.host,self.port))
                        logger.info("{} : Connected".format(self))
                        connected = True
                    except socket.timeout:
                        logger.error("{} : Connect to socket server timeout.{}:{}".format(self,ex.__class__.__name__,str(ex)))
                        if conn:
                            try:
                                conn.close()
                            except Exception as ex:
                                pass
                        continue
                    except ConnectionRefusedError as ex:
                        logger.error("{} : Socket server is offline.{}:{}".format(self,ex.__class__.__name__,str(ex)))
                        shutdown.wait(1)
                        if conn:
                            try:
                                conn.close()
                            except Exception as ex:
                                pass
                    except Exception as ex:
                        logger.error("{} : Failed to connect to socket server.{}:{}".format(self,ex.__class__.__name__,str(ex)))
                        if conn:
                            try:
                                conn.close()
                            except Exception as ex:
                                pass
                        continue

                if shutdown.shutdowning:
                    raise exceptions.SystemShutdown()

                #create the socket client
                try:
                    conn.sendall(json.dumps(self.conn_type).encode())
                except Exception as ex:
                    self.close()
                    logger.error("{}: Failed to send data to socket server.{} : {}".format(self,ex.__class__.__name__,str(ex)))
                    continue

                if shutdown.shutdowning:
                    raise exceptions.SystemShutdown()
                try:
                    data = conn.recv(1024)
                except Exception as ex:
                    self.close()
                    logger.error("{}: Failed to send data to socket server.{} : {}".format(self,ex.__class__.__name__,str(ex)))
                    continue

                data = json.loads(data)
                if not isinstance(data,(list,tuple)) or len(data) < 2:
                    raise exceptions.SocketClientTypeNotSupport("{}: Failed to create the {} socket client".format(self.conn_type))
                elif data[0]:
                    logger.info("{}: The {} socket client is established".format(self,self.conn_type))
                    self.post_connected()
                    self._conn = conn
                else:
                   raise exceptions.SocketClientTypeNotSupport(data[1])

        if shutdown.shutdowning:
            raise exceptions.SystemShutdown()
        return self._conn

    def close(self):
        if not self._conn:
            return

        try:
            self._conn.shutdown(socket.SHUT_RDWR)
        except Exception as ex:
            logger.error("{}: Failed to shutdown connection.{}:{}".format(self,ex.__class__.__name__,str(ex)))

        try:
            self._conn.close()
        except Exception as ex:
            logger.error("{}: Failed to close connection.{}:{}".format(self,ex.__class__.__name__,str(ex)))

        self._conn = None

    def send(self,data,reconnect_attempts=1):
        reconnect = 0
        try:
            data = json.dumps(data,cls=serializers.JSONEncoder).encode()
        except Exception as ex:
            raise exceptions.MalformedData("{}: The data is malformed.{}: {}".format(self,ex.__class__.__name__,str(ex)))
        while not shutdown.shutdowning and (reconnect_attempts == -1 or reconnect <= reconnect_attempts): 
            tries = 0
            while tries < settings.SOCKET_ATTEMPTS and not shutdown.shutdowning:
                tries += 1
                try:
                    self.connection.sendall(data)
                    return
                except socket.timeout:
                    continue
                except exceptions.SystemShutdown as ex:
                    raise ex
                except exceptions.SocketClientTypeNotSupport as ex:
                    raise ex
                except Exception as ex:
                    logger.error("{}: Failed to send data to socket server.{} : {}".format(self,ex.__class__.__name__,str(ex)))

            self.close()
            reconnect += 1

        if shutdown.shutdowning:
            raise exceptions.SystemShutdown()
        else:
            raise exceptions.SendDataToSocketServerFailed("{} : Failed to send data to socket server".format(self))


    def receive(self,reconnect_attempts=1):
        """
        reconnect_attempts: -1 means reconnect forever
        """
        reconnect = 0
        while not shutdown.shutdowning and (reconnect_attempts == -1 or reconnect <= reconnect_attempts): 
            tries = 0
            while tries < settings.SOCKET_ATTEMPTS and not shutdown.shutdowning:
                tries += 1
                try:
                    while True:
                        try:
                            data = self.connection.recv(1024)
                            break
                        except socket.timeout:
                            continue
                        except exceptions.SystemShutdown as ex:
                            raise ex
                        except exceptions.SocketClientTypeNotSupport as ex:
                            raise ex

                    if not data:
                        #connection closed
                        break

                    try:
                        data = json.loads(data.decode(),cls=serializers.JSONDecoder)
                    except Exception as ex:
                        raise exceptions.MalformedData("{}: The reponse from socket server is malformed. {} : {}".format(self,ex.__class__.__name__,str(ex)))

                    if data[0] > 0:
                        return data
                    else:
                        raise exceptions.FailedResponse(data[1])
                except exceptions.ReceiveDataFromSocketServerFailed as ex:
                    raise ex
                except exceptions.SystemShutdown as ex:
                    raise ex
                except exceptions.SocketClientTypeNotSupport as ex:
                    raise ex
                except exceptions.FailedResponse as ex:
                    raise ex
                except exceptions.MalformedData as ex:
                    raise ex
                except Exception as ex:
                    logger.error("{}: Failed to receive data from socket server.{} : {}".format(self,ex.__class__.__name__,str(ex)))

            self.close()
            reconnect += 1

        if shutdown.shutdowning:
            raise exceptions.SystemShutdown()
        else:
            raise exceptions.ReceiveDataFromSocketServerFailed("{}: Failed to receive data from socket server.".format(self))


class CommandSocketClient(SocketClient):
    conn_type = connectiontype.COMMAND
    def __init__(self,conn_type):
        super().__init__()
        self._lock = threading.Lock()

    def receive(self,reconnect_attempts=1):
        return super().receive(reconnect_attempts)[1]

    def exec(self,command):
        with self._lock:
            while True:
                try:
                    self.send(command,0)
                    return self.receive(0)
                except exceptions.SystemShutdown as ex:
                    raise ex
                except exceptions.SocketClientTypeNotSupport as ex:
                    raise ex
                except exceptions.MalformedData as ex:
                    raise ex
                except exceptions.FailedResponse as ex:
                    raise ex
                except Exception as ex:
                    self.close()
                    continue

class BaseHealthStatusListenerClient(SocketClient):
    def __init__(self):
        super().__init__()
        self._wait = threading.Event()
        self._statuslist = CycleList(settings.HEALTHSTATUS_BUFFER)
        self.worker = threading.Thread(name=self.name,daemon=False,target=self.run)
        self.worker.start()

    def wait(self):
        """
        Block forever until waked by new healthstatus
        """
        self._wait.wait(None)

    def shutdown(self):
        self.worker.join()

    def receive(self,reconnect_attempts=1):
        self._statuslist.add(super().receive(-1)[1])
        self._wait.set()
        self._wait.clear()

    def run(self):
        logger.info("{}: Start to listen the health check result".format(self))
        while not shutdown.shutdowning:
            try:
                self.receive()
            except exceptions.SystemShutdown as ex:
                break
            except Exception as ex:
                logger.error("{}: Failed to receive the data.{}: {}".format(self,ex.__class__.__name__,str(ex)))

        logger.info("{}: End to listen the health check result".format(self))

class HealthStatusListenerClient(BaseHealthStatusListenerClient):
    conn_type = connectiontype.HEALTHSTATUS_SUBSCRIPTOR

if __name__ == '__main__':
    exit(0)
    try:
        #listener = HealthStatusListenerClient()
        client = CommandSocketClient("command")
        while True:
            try:
                command = input("Enter socket command to execute or 'exit' to quit.")
                command = command.strip().lower()
                if command == 'exit':
                    break
                else:
                    command = command.split()
                    if len(command) == 1:
                        command = command[0]
                    print("request = {}, response = {}".format(command,client.exec(command)))
            except KeyboardInterrupt as ex:
                break
            except exceptions.SystemShutdown as ex:
                break
            except exceptions.FailedResponse as ex:
                logger.error("Faield to process request({}). {}: {}".format(command,ex.__class__.__name__,str(ex)))
                continue
    finally:
        shutdown.shutdown()

